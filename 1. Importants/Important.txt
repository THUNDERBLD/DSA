--------------------- DSA ---------------------

Randoms 
1. Make your approch more versatile 
   eg :- largest value of the 3 input numbers  
    int max = input1;
        if(max < input2){
             max = input2;
        } else if(max < input3){
             max = input3;
        }
        System.out.println("The maximum element value is " + max);
2. Java dont have distructure because java contains a garbage collector in automatic memory management, which preforms the work of distructure. 
3. Java dont support pointers, instead u can use copy of reference memory, because of this, java is more secured...
4. Strings are immutable in java and arrays are mutable in java
5. IMP ==> Remember in recursion after completion of all the call backs, the backtracking occurred and after backtracking the next line code will execute... (Backtracking pura hona ka bad, us he function ki agli line execute hogi jis line ka user function calling itself ho raha hoga)


Platform:-
windows(O.S) + intel(processor)
OR
linux(O.S) + AMD(processor)
C++ can only run for these types of platform because different processor have different instruction sets and different OS stores data in different format.
eg for processors.   ADM (sub --> 01011 )(add --> 10011)
                     intel (add --> 01011)(sub --> 01011)
     
eg for OS.  windows --> a add b
            linux --> add a,b

therefore the combination of OS and platform makes C++ platform dependent 
where as Java is platform independent because of its flow of file structure...



Flow structure of java code file
file.java     ---------->    file.class   --------->     JVM     --------->   file.exe
  (P.I)         compiler      (P.I)                     (P.D)                   (P.D)        (P.I)-> platform independent, (P.D) -> platform dependent  
(source code)                (byte code)            (Heart of Java)        (low level language)


JDK (contains javac, jar, etc.)
    JRE (contains java, runtime library)
        JVM (contains gc, intrepeter, JITC, etc.)
        
        
=> Where to use which algo        
LinearSearch -> first brout force approach comes to ur mind if u dont get other approach( because its time complexity O(n) which is bad ).
BinarySearch -> use whenever u get a sorted or reverse sorted array. (it have good time complexity ie. O(log2 n)).









